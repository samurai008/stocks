{"version":3,"sources":["store/StockPriceStore.js","App.js","actions/StockPriceActions.js","serviceWorker.js","index.js","dispatcher/dispatcher.js"],"names":["StockPriceStore","_this","Object","_Users_Nilabjo_react_apps_my_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_Nilabjo_react_apps_my_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_Nilabjo_react_apps_my_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","stockDict","data","_this2","stockData","eval","forEach","val","base","concat","Date","toString","price","name","time","emit","action","type","reloadStocks","stocks","EventEmitter","stockPriceStore","dispatcher","register","handleActions","bind","stockSocket","window","closeConnection","close","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","getAll","sortFn","console","log","keys","length","WebSocket","getStockPrices","onmessage","event","dispatch","a","b","parse","sort","map","key","i","react_default","createElement","data-key","className","toFixed","slice","on","setState","_this3","StockTable","createStockTable","AskToLoad","colSpan","href","onClick","openConnection","e","sortByName","sortByPrice","sortByTime","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","flux__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","Dispatcher"],"mappings":"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","file":"static/js/main.1023bb4c.chunk.js","sourcesContent":["import { EventEmitter } from 'events';\nimport dispatcher from '../dispatcher/dispatcher';\n\nclass StockPriceStore extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.stockDict = {}\n\t}\n\n\treloadStocks(data) {\n\t\t// val[0] = name\n\t\t// val[1] = price\n\t\t// val[2] = time\n\t\tlet stockData = eval(data);\n\t\t\n\t\tstockData.forEach(val => {\n\t\t\tlet base = null; // false = low, true = high\n\t\t\tval = val.concat(new Date().toString());\n\t\t\tif (this.stockDict[val[0]]) {\n\t\t\t\tbase = this.stockDict[val[0]].price < val[1] ? true : false;\n\t\t\t}\n\t\t\tthis.stockDict[val[0]] = {\n\t\t\t\tname: val[0], \n\t\t\t\tprice: val[1], \n\t\t\t\ttime: val[2],\n\t\t\t\tbase: base\n\t\t\t};\n\t\t});\n\t\tthis.emit('stockChange');\n\t}\n\n\thandleActions(action) {\n\t\tswitch(action.type) {\n\t\t\tcase 'RELOAD_STOCKS':\n\t\t\t\tthis.reloadStocks(action.stocks);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tgetAll() {\n\t\treturn this.stockDict;\n\t}\n}\n\nconst stockPriceStore = new StockPriceStore;\ndispatcher.register(stockPriceStore.handleActions.bind(stockPriceStore));\nexport default stockPriceStore;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport StockPriceStore from \"./store/StockPriceStore\";\nimport * as StockPriceActions from \"./actions/StockPriceActions\";\n\nconst uri = \"wss://stocks.mnet.website\";\nlet stockSocket;\nwindow.closeConnection = () => stockSocket.close();\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      stocks: StockPriceStore.getAll(),\n      sortFn: () => {}\n    };\n    console.log(Object.keys(this.state.stocks).length);\n  }\n\n  openConnection() {\n    stockSocket = new WebSocket(uri);\n    this.getStockPrices();\n  }\n\n  closeConnection() {\n    stockSocket.close();\n  }\n\n  getStockPrices() {\n    stockSocket.onmessage = event => {\n      StockPriceActions.reloadStocks(event.data);\n    };\n  }\n\n  sortByName(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }\n\n  sortByPrice(a, b) {\n    return this[b].price - this[a].price;\n  }\n\n  sortByTime(a, b) {\n    return Date.parse(this[a].time) - Date.parse(this[b].time) > 0\n      ? -1\n      : Date.parse(this[a].time) - Date.parse(this[a].time) < 0\n      ? 1\n      : 0;\n  }\n\n  createStockTable(data) {\n    return Object.keys(data)\n      .sort(this.state.sortFn.bind(data))\n      .map((key, i) => {\n        return (\n          <tr\n            data-key={i}\n            key={i}\n            className={\n              data[key].base\n                ? \"bg-success text-white\"\n                : data[key].base === null\n                ? \"text-dark\"\n                : \"bg-danger text-white\"\n            }\n          >\n            <td className=\"text-center\">{data[key].name}</td>\n            <td className=\"text-center\">{data[key].price.toFixed(2)}</td>\n            <td className=\"text-center\">{data[key].time.slice(0, 24)}</td>\n          </tr>\n        );\n      });\n  }\n\n  componentWillMount() {\n    StockPriceStore.on(\"stockChange\", () => {\n      console.log(\"New batch of stocks!\", StockPriceStore.getAll());\n      this.setState({\n        stocks: StockPriceStore.getAll()\n      });\n    });\n  }\n\n  render() {\n    const StockTable = this.createStockTable(this.state.stocks);\n    const AskToLoad = (\n      <tr>\n        <td className=\"text-center text-info\" colSpan=\"3\">\n          Click open to load stream.\n        </td>\n      </tr>\n    );\n\n    return (\n      <div>\n        <div className=\"container p-2\">\n          <div className=\"d-flex justify-content-between\">\n            <div>\n              <a href=\"#\" onClick={this.openConnection.bind(this)}>\n                Open Stream\n              </a>\n            </div>\n            <div>\n              <a href=\"#\" onClick={this.closeConnection.bind(this)}>\n                Close Stream\n              </a>\n            </div>\n          </div>\n          <table className=\"table mt-2\">\n            <thead>\n              <tr>\n                <th className=\"text-center\">\n                  <a\n                    href=\"#\"\n                    onClick={e => this.setState({ sortFn: this.sortByName })}\n                  >\n                    Name\n                  </a>\n                </th>\n                <th className=\"text-center\">\n                  <a\n                    href=\"#\"\n                    onClick={e => this.setState({ sortFn: this.sortByPrice })}\n                  >\n                    Price\n                  </a>\n                </th>\n                <th className=\"text-center\">\n                  <a\n                    href=\"#\"\n                    onClick={e => this.setState({ sortFn: this.sortByTime })}\n                  >\n                    Last Updated\n                  </a>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(this.state.stocks).length === 0\n                ? AskToLoad\n                : StockTable}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import dispatcher from \"../dispatcher/dispatcher\";\n\nexport function reloadStocks(data) {\n\tdispatcher.dispatch({\n\t\ttype: 'RELOAD_STOCKS',\n\t\tstocks: data\n\t})\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { Dispatcher } from \"flux\";\n\nexport default new Dispatcher;"],"sourceRoot":""}